{"version":3,"sources":["createTextMaskInputElement.js"],"names":["define","textmask","adjustCaretPosition","conformToMask","a","constants","emptyString","strNone","strObject","isAndroid","navigator","test","userAgent","defer","requestAnimationFrame","setTimeout","createTextMaskInputElement","config","state","previousConformedValue","undefined","previousPlaceholder","[object Object]","rawValue","inputElement","mask","providedMask","guide","pipe","placeholderChar","keepCharPositions","showMask","value","placeholder","Array","convertMaskToPlaceholder","safeRawValue","inputValue","isString","isNumber","String","Error","JSON","stringify","getSafeRawValue","selectionEnd","currentCaretPosition","caretTrapIndexes","strFunction","maskWithoutCaretTraps","indexes","processCaretTraps","conformToMaskConfig","conformedValue","piped","pipeResults","Object","assign","rejected","finalConformedValue","adjustedCaretPosition","indexesOfPipedChars","inputElementValue","element","selectionPosition","document","activeElement","setSelectionRange"],"mappings":"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","file":"../createTextMaskInputElement.js","sourcesContent":["define([\n    \"./textmask\",\n    './adjustCaretPosition',\n    './conformToMask',\n    './utilities',\n    './constants'\n], function (textmask,adjustCaretPosition, conformToMask, a,constants) {\n    'use strict';\n\n    const emptyString = '';\n    const strNone = 'none';\n    const strObject = 'object';\n    const isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\n\n    const defer = typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame : setTimeout;\n\n    function createTextMaskInputElement(config) {\n        const state = {\n            previousConformedValue: undefined,\n            previousPlaceholder: undefined\n        };\n        return {\n            state,\n            update(rawValue, {\n                inputElement,\n                mask: providedMask,\n                guide,\n                pipe,\n                placeholderChar = constants.placeholderChar,\n                keepCharPositions = false,\n                showMask = false\n            } = config) {\n                if (typeof rawValue === 'undefined') {\n                    rawValue = inputElement.value;\n                }\n                if (rawValue === state.previousConformedValue) {\n                    return;\n                }\n                if (typeof providedMask === strObject && providedMask.pipe !== undefined && providedMask.mask !== undefined) {\n                    pipe = providedMask.pipe;\n                    providedMask = providedMask.mask;\n                }\n                let placeholder;\n                let mask;\n                if (providedMask instanceof Array) {\n                    placeholder = a.convertMaskToPlaceholder(providedMask, placeholderChar);\n                }\n                if (providedMask === false) {\n                    return;\n                }\n                const safeRawValue = getSafeRawValue(rawValue);\n                const {selectionEnd: currentCaretPosition} = inputElement;\n                const {previousConformedValue, previousPlaceholder} = state;\n                let caretTrapIndexes;\n                if (typeof providedMask === constants.strFunction) {\n                    mask = providedMask(safeRawValue, {\n                        currentCaretPosition,\n                        previousConformedValue,\n                        placeholderChar\n                    });\n                    if (mask === false) {\n                        return;\n                    }\n                    const {maskWithoutCaretTraps, indexes} = a.processCaretTraps(mask);\n                    mask = maskWithoutCaretTraps;\n                    caretTrapIndexes = indexes;\n                    placeholder = a.convertMaskToPlaceholder(mask, placeholderChar);\n                } else {\n                    mask = providedMask;\n                }\n                const conformToMaskConfig = {\n                    previousConformedValue,\n                    guide,\n                    placeholderChar,\n                    pipe,\n                    placeholder,\n                    currentCaretPosition,\n                    keepCharPositions\n                };\n                const {conformedValue} = conformToMask(safeRawValue, mask, conformToMaskConfig);\n                const piped = typeof pipe === constants.strFunction;\n                let pipeResults = {};\n                if (piped) {\n                    pipeResults = pipe(conformedValue, Object.assign({\n                        rawValue: safeRawValue\n                    },conformToMaskConfig));\n                    if (pipeResults === false) {\n                        pipeResults = {\n                            value: previousConformedValue,\n                            rejected: true\n                        };\n                    } else if (a.isString(pipeResults)) {\n                        pipeResults = { value: pipeResults };\n                    }\n                }\n                const finalConformedValue = piped ? pipeResults.value : conformedValue;\n                const adjustedCaretPosition = adjustCaretPosition({\n                    previousConformedValue,\n                    previousPlaceholder,\n                    conformedValue: finalConformedValue,\n                    placeholder,\n                    rawValue: safeRawValue,\n                    currentCaretPosition,\n                    placeholderChar,\n                    indexesOfPipedChars: pipeResults.indexesOfPipedChars,\n                    caretTrapIndexes\n                });\n                const inputValueShouldBeEmpty = finalConformedValue === placeholder && adjustedCaretPosition === 0;\n                const emptyValue = showMask ? placeholder : emptyString;\n                const inputElementValue = inputValueShouldBeEmpty ? emptyValue : finalConformedValue;\n                state.previousConformedValue = inputElementValue;\n                state.previousPlaceholder = placeholder;\n                if (inputElement.value === inputElementValue) {\n                    return;\n                }\n                inputElement.value = inputElementValue;\n                safeSetSelection(inputElement, adjustedCaretPosition);\n            }\n        };\n    };\n    function safeSetSelection(element, selectionPosition) {\n        if (document.activeElement === element) {\n            if (isAndroid) {\n                defer(() => element.setSelectionRange(selectionPosition, selectionPosition, strNone), 0);\n            } else {\n                element.setSelectionRange(selectionPosition, selectionPosition, strNone);\n            }\n        }\n    }\n    function getSafeRawValue(inputValue) {\n        if (a.isString(inputValue)) {\n            return inputValue;\n        } else if (a.isNumber(inputValue)) {\n            return String(inputValue);\n        } else if (inputValue === undefined || inputValue === null) {\n            return emptyString;\n        } else {\n            throw new Error(\"The 'value' provided to Text Mask needs to be a string or a number. The value \" + `received was:\\n\\n ${ JSON.stringify(inputValue) }`);\n        }\n    }\n\n\n    return textmask.createTextMaskInputElement = createTextMaskInputElement;\n});"]}