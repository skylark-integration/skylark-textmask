{"version":3,"sources":["utilities.js"],"names":["define","defaultPlaceholderChar","emptyArray","isArray","value","Array","strCaretTrap","convertMaskToPlaceholder","mask","placeholderChar","Error","indexOf","JSON","stringify","map","char","RegExp","join","isString","String","isNumber","undefined","length","isNaN","isNil","processCaretTraps","indexes","indexOfCaretTrap","push","splice","maskWithoutCaretTraps"],"mappings":";;;;;;;AAAAA,QAAQ,eAAgB,SAAUC,GAC9B,aACA,MAAMC,KAYN,SAASC,EAAQC,GACb,OAAOC,MAAMF,SAAWE,MAAMF,QAAQC,IAAUA,aAAiBC,MAWrE,MAAMC,EAAe,KAarB,OACIC,yBArCJ,SAAkCC,EAAON,EAAYO,EAAkBR,GACnE,IAAKE,EAAQK,GACT,MAAM,IAAIE,MAAM,2EAEpB,IAAuC,IAAnCF,EAAKG,QAAQF,GACb,MAAM,IAAIC,MAAM,gNAAwNE,KAAKC,UAAUJ,2CAA6DG,KAAKC,UAAUL,MAEvU,OAAOA,EAAKM,IAAIC,GACLA,aAAgBC,OAASP,EAAkBM,GACnDE,KAAK,KA6BRd,QAASA,EACTe,SAzBJ,SAAkBd,GACd,MAAwB,iBAAVA,GAAsBA,aAAiBe,QAyBrDC,SAvBJ,SAAkBhB,GACd,MAAwB,iBAAVA,QAAuCiB,IAAjBjB,EAAMkB,SAAyBC,MAAMnB,IAuBzEoB,MArBJ,SAAepB,GACX,YAAwB,IAAVA,GAAmC,OAAVA,GAqBvCqB,kBAlBJ,SAA2BjB,GACvB,MAAMkB,KACN,IAAIC,EACJ,MAA4E,KAArEA,EAAmBnB,EAAKG,QAAQL,KACnCoB,EAAQE,KAAKD,GACbnB,EAAKqB,OAAOF,EAAkB,GAElC,OACIG,sBAAuBtB,EACvBkB,QAAAA","file":"../utilities.js","sourcesContent":["define(['./constants'], function (defaultPlaceholderChar) {\n    'use strict';\n    const emptyArray = [];\n    function convertMaskToPlaceholder(mask = emptyArray, placeholderChar = defaultPlaceholderChar) {\n        if (!isArray(mask)) {\n            throw new Error('Text-mask:convertMaskToPlaceholder; The mask property must be an array.');\n        }\n        if (mask.indexOf(placeholderChar) !== -1) {\n            throw new Error('Placeholder character must not be used as part of the mask. Please specify a character ' + 'that is not present in your mask as your placeholder character.\\n\\n' + `The placeholder character that was received is: ${ JSON.stringify(placeholderChar) }\\n\\n` + `The mask that was received is: ${ JSON.stringify(mask) }`);\n        }\n        return mask.map(char => {\n            return char instanceof RegExp ? placeholderChar : char;\n        }).join('');\n    }\n    function isArray(value) {\n        return Array.isArray && Array.isArray(value) || value instanceof Array;\n    }\n    function isString(value) {\n        return typeof value === 'string' || value instanceof String;\n    }\n    function isNumber(value) {\n        return typeof value === 'number' && value.length === undefined && !isNaN(value);\n    }\n    function isNil(value) {\n        return typeof value === 'undefined' || value === null;\n    }\n    const strCaretTrap = '[]';\n    function processCaretTraps(mask) {\n        const indexes = [];\n        let indexOfCaretTrap;\n        while (indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) {\n            indexes.push(indexOfCaretTrap);\n            mask.splice(indexOfCaretTrap, 1);\n        }\n        return {\n            maskWithoutCaretTraps: mask,\n            indexes\n        };\n    }\n    return {\n        convertMaskToPlaceholder: convertMaskToPlaceholder,\n        isArray: isArray,\n        isString: isString,\n        isNumber: isNumber,\n        isNil: isNil,\n        processCaretTraps: processCaretTraps\n    };\n});"]}